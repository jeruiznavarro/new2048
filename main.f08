program two_hundred_sixty_two_thousand_one_hundred_forty_four
	implicit none!all variables must be declared
	logical::game_over=.false.!this variable will be false until there are no more possible moves
	logical::no_moves=.false.!if true, it will mean that there are no possible movements left
	integer(4)::auxiliary_empty_cells(0:255)=-1!this vector keeps track of where the index of a certain cell is located in the empty_cells array, for example: empty_cells(0:3)=(/1,3,0,2/) would mean that the values of this array are the following: auxiliary_empty_cells(0:3)=(/2,0,1,3/), thus, only the index of a cell is needed when its interal data are required
	integer(4)::auxiliary_empty_cells_history(0:255,0:99)=-1!same as matrix_history, but the player doesn't interact with this variable, it's only kept so it's faster to move back in the history of movements
	integer(4)::cells=0!number of cells per side of the square to be used in the game
	integer(4)::current_empty_cells=0!this is the amount of empty cells in a certain moment
	integer(4)::current_empty_cells_history(0:99)=0!same as matrix_history, but the player doesn't interact with this variable, it's only kept so it's faster to move back in the history of movements
	integer(4)::empty_cells(0:255)=-1!the indeces of empty cells are sequentially kept here with no occupied cells in between, all of those are at the end of the array
	integer(4)::empty_cells_history(0:255,0:99)=-1!same as matrix_history, but the player doesn't interact with this variable, it's only kept so it's faster to move back in the history of movements
	integer(4)::history_position=0!this variable keeps track of where should the program write in the history arrays
	integer(4)::matrix(0:15,0:15)=0!all the number cells are here
	integer(4)::matrix_history(0:15,0:15,0:99)=0!history of player movements, when stored movements reach 99, it saves the next snapshot of the matrix in 0, overwriting the previous value, and starts overwriting the next ones as more snapshots are generated by the player
	integer(4)::score=0!this keeps the puntuation of the game
	integer(4)::score_history(0:99)=0!same as matrix_history, but the player doesn't interact with this variable, it's only kept so it's faster to move back in the history of movements
	integer(4)::snapshots=0!this is the amount of movements stored in the third index of matrix_history, when it reaches 100 it doesn't increase anymore
	common /basic/ cells,current_empty_cells,history_position,snapshots!sharing the basic variables needed for the move_* family, move_back, new_game, save_game and load_game subroutines
	common /logic/ game_over,no_moves!the move_* family of subroutines also neede these two logical variables
	common /score/ score!this variable is also needed by prompt_player and all the subroutines that need /basic/ except for new_game

	call start(auxiliary_empty_cells,auxiliary_empty_cells_history,current_empty_cells_history,empty_cells,empty_cells_history,matrix,matrix_history,score_history)!asking the player if a new game should start or if a game is to be loaded
	do
		call prompt_player(auxiliary_empty_cells,auxiliary_empty_cells_history,current_empty_cells_history,empty_cells,empty_cells_history,matrix,matrix_history,score_history)!asking the player what s/he wants to do
		if(game_over)call end_game(auxiliary_empty_cells,auxiliary_empty_cells_history,current_empty_cells_history,empty_cells,empty_cells_history,game_over,matrix,matrix_history,score_history)!the player is asked if a new game should start or if the game is to be quitted
	end do
end program two_hundred_sixty_two_thousand_one_hundred_forty_four